<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"> <!-- Meta tag for responsive design -->
    <title>Tracked Products</title> <!-- Page title -->
    <link rel="icon" href="/images/dollar.jpg" type="image/x-icon"> <!-- Favicon for the page -->
    <link rel="stylesheet" href="/styles/tracked.css"> <!-- Link to the external stylesheet for page styling -->
</head>
<body>

    <!-- Navigation Bar -->
    <nav class="navbar">
        <ul class="navbar-links">
            <li><img src="/images/pricewatchlogo.png" alt="PriceWatch Logo"></li> <!-- PriceWatch logo -->
            <li><a href="/">Home</a></li> <!-- Link to the homepage -->
            <li><a href="/tracked">Tracked Products</a></li> <!-- Link to the tracked products page -->
            <li><a href="/about">About PriceWatch</a></li> <!-- Link to the About PriceWatch page -->
        </ul>
    </nav>

    <!-- Main Container -->
    <div class="container">
        <h2>Tracked Products</h2> <!-- Heading for the tracked products page -->
        
        <!-- Sorting Options -->
        <div class="sort-options">
            <span>Sort by: </span>
            <button onclick="sortProducts('date-desc')">Order Added (Oldest to Newest)</button> <!-- Sort by date added, oldest to newest -->
            <button onclick="sortProducts('date-asc')">Order Added (Newest to Oldest)</button> <!-- Sort by date added, newest to oldest -->
            <button onclick="sortProducts('title-asc')">A-Z</button> <!-- Sort by title, A-Z -->
            <button onclick="sortProducts('title-desc')">Z-A</button> <!-- Sort by title, Z-A -->
        </div>

        <!-- Search Bar -->
        <input type="text" id="searchBar" placeholder="Search for your tracked product" onkeyup="filterProducts()"> <!-- Input field for searching products -->

        <!-- Messages for No Products or No Results -->
        <p id="noProductsMessage" style="display: none;">No products are currently being tracked. Add some products to start tracking their prices!</p> <!-- Message displayed when no products are tracked -->
        <p id="noResultsMessage" style="display: none;">No products found</p> <!-- Message displayed when search yields no results -->

        <!-- List of Tracked Products -->
        <ul id="urlList"></ul> <!-- List where tracked products will be displayed -->
    </div>

    <script>
        let products = []; // Array to hold the list of products

        // Function to sort products based on criteria
        function sortProducts(criteria) {
            let sortedProducts = [...products]; // Create a copy of the products array
            switch (criteria) {
                case 'date-asc':
                    sortedProducts.sort((a, b) => new Date(a.dateAdded) - new Date(b.dateAdded)); // Sort by date ascending
                    break;
                case 'date-desc':
                    sortedProducts.sort((a, b) => new Date(b.dateAdded) - new Date(a.dateAdded)); // Sort by date descending
                    break;
                case 'title-asc':
                    sortedProducts.sort((a, b) => a.title.localeCompare(b.title)); // Sort by title ascending
                    break;
                case 'title-desc':
                    sortedProducts.sort((a, b) => b.title.localeCompare(a.title)); // Sort by title descending
                    break;
            }
            updateProductList(sortedProducts); // Update the product list with sorted products
        }

        // Function to filter products based on search query
        function filterProducts() {
            const query = document.getElementById('searchBar').value.toLowerCase(); // Get the search query
            const filteredProducts = products.filter(product => product.title.toLowerCase().includes(query)); // Filter products
            updateProductList(filteredProducts); // Update the product list with filtered products
            const noResultsMessage = document.getElementById('noResultsMessage');
            const noProductsMessage = document.getElementById('noProductsMessage');
            if (filteredProducts.length === 0 && query.length > 0) {
                noResultsMessage.style.display = 'block'; // Show no results message if no products match the query
                noProductsMessage.style.display = 'none'; // Hide no products message if there are results
            } else {
                noResultsMessage.style.display = 'none'; // Hide no results message if there are matching products
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            fetchUrls(); // Fetch the list of tracked products when the page loads

            // Function to fetch the list of tracked products
            async function fetchUrls() {
                const response = await fetch('/products/get-urls'); // Fetch data from the server
                products = await response.json(); // Parse the JSON response
                products.forEach((product, index) => {
                    product.dateAdded = new Date().getTime() - index * 1000 * 60 * 60; // Simulate different dates
                });
                updateProductList(products); // Update the product list with fetched products
            }

            // Function to update the product list on the page
            window.updateProductList = function(products) {
                const urlList = document.getElementById('urlList');
                const noProductsMessage = document.getElementById('noProductsMessage');
                const noResultsMessage = document.getElementById('noResultsMessage');
                urlList.innerHTML = ''; // Clear the list
                if (products.length === 0) {
                    noProductsMessage.style.display = 'block'; // Show no products message if the list is empty
                    noResultsMessage.style.display = 'none'; // Hide no results message if the list is empty
                } else {
                    noProductsMessage.style.display = 'none'; // Hide no products message if there are products
                    products.forEach((product, index) => {
                        const listItem = document.createElement('li'); // Create a new list item
                        const link = document.createElement('a'); // Create a new link
                        link.href = `/products/${index}`; // Set the href to the product URL
                        link.innerText = product.title; // Set the link text to the product title

                        const deleteButton = document.createElement('button'); // Create a new delete button
                        deleteButton.className = 'delete-button';
                        deleteButton.innerHTML = '<img src="/images/delete.png" alt="Delete" class="delete-icon">'; // Set button content
                        deleteButton.onclick = () => removeUrl(index); // Set delete button functionality

                        listItem.appendChild(link); // Add the link to the list item
                        listItem.appendChild(deleteButton); // Add the delete button to the list item
                        urlList.appendChild(listItem); // Add the list item to the list
                    });
                }
            }

            // Function to remove a product from the list
            async function removeUrl(index) {
                await fetch(`/products/delete-url/${index}`, {
                    method: 'DELETE',
                });
                fetchUrls(); // Refresh the product list after deletion
            }
        });
    </script>
</body>
</html>
