<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"> <!-- Meta tag for responsive design -->
    <title>Tracked Products</title> <!-- Page title -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Comic+Neue:ital,wght@0,300;0,400;0,700;1,300;1,400;1,700&family=Kanit:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Open+Sans:ital,wght@0,300..800;1,300..800&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet">
    <link rel="icon" href="/images/dollar.jpg" type="image/x-icon"> <!-- Favicon for the page -->
    <link rel="stylesheet" href="/styles/tracked.css"> <!-- Link to the external stylesheet for page styling -->
</head>
<body>

    <!-- Navigation Bar -->
    <nav class="navbar">
        <ul class="navbar-links">
            <li><img src="/images/pricewatchlogo.png" alt="PriceWatch Logo"></li>
            <li><a href="/">Home</a></li>
            <li><a href="/tracked">Tracked Products</a></li>
            <li><a href="/about">About PriceWatch</a></li>
            <li class="spacer"></li> <!-- Empty space to push the toggle to the right -->
            <li class="toggle-container">
                <button id="darkModeToggle" class="dark-mode-toggle">🌙</button>
            </li>
        </ul>
    </nav>

    <!-- Main Container -->
    <div class="container">
        <h2>Tracked Products</h2> <!-- Heading for the tracked products page -->
        
        <!-- Sorting Options -->
        <div class="sort-options">
            <span>Sort by: </span>
            <button onclick="sortProducts('date-desc')">Order Added (Oldest to Newest)</button> <!-- Sort by date added, oldest to newest -->
            <button onclick="sortProducts('date-asc')">Order Added (Newest to Oldest)</button> <!-- Sort by date added, newest to oldest -->
            <button onclick="sortProducts('title-asc')">A-Z</button> <!-- Sort by title, A-Z -->
            <button onclick="sortProducts('title-desc')">Z-A</button> <!-- Sort by title, Z-A -->
        </div>

        <!-- Search Bar -->
        <input type="text" id="searchBar" placeholder="Search for your tracked product" onkeyup="filterProducts()"> <!-- Input field for searching products -->

        <!-- Messages for No Products or No Results -->
        <p id="noProductsMessage" style="display: none;">No products are currently being tracked. Add some products to start tracking their prices!</p> <!-- Message displayed when no products are tracked -->
        <p id="noResultsMessage" style="display: none;">No products found</p> <!-- Message displayed when search yields no results -->

        <!-- List of Tracked Products -->
        <ul id="urlList"></ul> <!-- List where tracked products will be displayed -->
    </div>

    <script>
        let products = []; // Array to hold the list of products

        // Function to sort products based on criteria
        function sortProducts(criteria) {
            let sortedProducts = [...products]; // Create a copy of the products array
            switch (criteria) {
                case 'date-asc':
                    sortedProducts.sort((a, b) => new Date(a.dateAdded) - new Date(b.dateAdded)); // Sort by date ascending
                    break;
                case 'date-desc':
                    sortedProducts.sort((a, b) => new Date(b.dateAdded) - new Date(a.dateAdded)); // Sort by date descending
                    break;
                case 'title-asc':
                    sortedProducts.sort((a, b) => a.title.localeCompare(b.title)); // Sort by title ascending
                    break;
                case 'title-desc':
                    sortedProducts.sort((a, b) => b.title.localeCompare(a.title)); // Sort by title descending
                    break;
            }
            updateProductList(sortedProducts); // Update the product list with sorted products
        }

        // Function to filter products based on search query
        function filterProducts() {
            const query = document.getElementById('searchBar').value.toLowerCase(); // Get the search query
            const filteredProducts = products.filter(product => product.title.toLowerCase().includes(query)); // Filter products
            updateProductList(filteredProducts); // Update the product list with filtered products
            const noResultsMessage = document.getElementById('noResultsMessage');
            const noProductsMessage = document.getElementById('noProductsMessage');
            if (filteredProducts.length === 0 && query.length > 0) {
                noResultsMessage.style.display = 'block'; // Show no results message if no products match the query
                noProductsMessage.style.display = 'none'; // Hide no products message if there are results
            } else {
                noResultsMessage.style.display = 'none'; // Hide no results message if there are matching products
            }
        }
        document.addEventListener('DOMContentLoaded', () => {
    fetchUrls();

    async function fetchUrls() {
        const response = await fetch('/products/get-urls');
        products = await response.json();
        products.forEach((product, index) => {
            product.dateAdded = new Date().getTime() - index * 1000 * 60 * 60; // simulate different dates
        });
        updateProductList(products);
    }

    window.updateProductList = function (products) {
        const urlList = document.getElementById('urlList');
        const noProductsMessage = document.getElementById('noProductsMessage');
        const noResultsMessage = document.getElementById('noResultsMessage');
        const isDarkMode = document.body.classList.contains('dark-mode');
        urlList.innerHTML = '';
        if (products.length === 0) {
            noProductsMessage.style.display = 'block';
            noResultsMessage.style.display = 'none'; // Hide noResultsMessage if the list is initially empty
        } else {
            noProductsMessage.style.display = 'none';
            products.forEach((product, index) => {
                const listItem = document.createElement('li');
                const link = document.createElement('a');
                link.href = `/products/${index}`;
                link.innerText = product.title;

                const deleteButton = document.createElement('button');
                deleteButton.className = 'delete-button';
                deleteButton.innerHTML = `<img src="${isDarkMode ? '/images/whitetrash.png' : '/images/delete.png'}" alt="Delete" class="delete-icon">`;
                deleteButton.onclick = () => removeUrl(index);

                listItem.appendChild(link);
                listItem.appendChild(deleteButton);
                urlList.appendChild(listItem);
            });
        }
    }

    async function removeUrl(index) {
        await fetch(`/products/delete-url/${index}`, {
            method: 'DELETE',
        });
        fetchUrls();
    }

    const toggleButton = document.getElementById('darkModeToggle');
    const isDarkMode = localStorage.getItem('dark-mode') === 'true';

    if (isDarkMode) {
        document.body.classList.add('dark-mode');
        toggleButton.textContent = '☀️';
    }

    toggleButton.addEventListener('click', () => {
        document.body.classList.toggle('dark-mode');
        const darkModeEnabled = document.body.classList.contains('dark-mode');
        localStorage.setItem('dark-mode', darkModeEnabled);
        toggleButton.textContent = darkModeEnabled ? '☀️' : '🌙';

        // Update delete icons based on the mode
        const deleteIcons = document.querySelectorAll('.delete-icon');
        deleteIcons.forEach(icon => {
            icon.src = darkModeEnabled ? '/images/whitetrash.png' : '/images/delete.png';
        });
    });
});
    </script>
</body>
</html>
